# Generated by Django 5.0.6 on 2024-08-07 07:28

import apps.course.models
import ckeditor.fields
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='CodeTask',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.TextField()),
                ('code', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='QuestionAnswersToChoose',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=300)),
            ],
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='Course',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=250)),
                ('image', models.ImageField(blank=True, upload_to='courses')),
                ('about', ckeditor.fields.RichTextField(blank=True)),
                ('level', models.CharField(choices=[('Beginner', 'Beginner'), ('Intermediate', 'Intermediate'), ('Expert', 'Expert')], max_length=13)),
                ('public', models.BooleanField(default=False)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('likes', models.ManyToManyField(blank=True, related_name='likes', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('users_who_registered', models.ManyToManyField(blank=True, related_name='users_who_registered', to=settings.AUTH_USER_MODEL)),
                ('tags', models.ManyToManyField(blank=True, to='course.tag')),
            ],
            options={
                'ordering': ['-created'],
            },
        ),
        migrations.CreateModel(
            name='CourseReview',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('message', models.TextField(blank=True, max_length=1000)),
                ('stars', models.IntegerField(blank=True, default=0)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='course.course')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created'],
            },
        ),
        migrations.CreateModel(
            name='Question',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=500)),
                ('type', models.CharField(choices=[('No answer choice', 'No answer choice'), ('With a choice of one answer', 'With a choice of one answer')], max_length=100)),
                ('correct_answer', models.CharField(max_length=200)),
                ('answers_to_choose', models.ManyToManyField(blank=True, to='course.questionanswerstochoose')),
            ],
        ),
        migrations.CreateModel(
            name='Task',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('type', models.CharField(blank=True, choices=[('TaskText', 'TaskText'), ('TaskVideo', 'TaskVideo'), ('TaskProject', 'TaskProject'), ('TaskQuestions', 'TaskQuestions'), ('TaskCode', 'TaskCode')], max_length=20)),
                ('points', models.IntegerField(default=0)),
                ('video', models.FileField(blank=True, upload_to=apps.course.models.Task.task_directory_path)),
                ('text', ckeditor.fields.RichTextField(blank=True, default='')),
                ('public', models.BooleanField(default=False)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('bookmarks', models.ManyToManyField(blank=True, related_name='task_bookmarks', to=settings.AUTH_USER_MODEL)),
                ('code_tasks', models.ManyToManyField(blank=True, default=[], to='course.codetask')),
                ('questions', models.ManyToManyField(blank=True, default=[], to='course.question')),
                ('users_who_completed', models.ManyToManyField(blank=True, related_name='users_who_completed_task', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='TaskComment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.TextField(max_length=1000)),
                ('is_public', models.BooleanField(blank=True, default=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('likes', models.ManyToManyField(blank=True, related_name='taskCommentLikes', to=settings.AUTH_USER_MODEL)),
                ('task', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='course.task')),
                ('task_comment_parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='task_comment_children', to='course.taskcomment')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created'],
            },
        ),
        migrations.CreateModel(
            name='TaskCommentUserComplaint',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(choices=[('Unwanted advertising or spam', 'Unwanted advertising or spam'), ('Pornography or explicit sex scenes', 'Pornography or explicit sex scenes'), ('Discriminatory language or naturalistic content', 'Discriminatory language or naturalistic content'), ('Propaganda of terrorism', 'Propaganda of terrorism'), ('Harassment or bullying', 'Harassment or bullying'), ('Suicide or self-mutilation', 'Suicide or self-mutilation'), ('False information', 'False information')], max_length=100)),
                ('message', models.TextField(blank=True, max_length=1500)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('taskComment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='course.taskcomment')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['created'],
            },
        ),
        migrations.AddField(
            model_name='taskcomment',
            name='complaints',
            field=models.ManyToManyField(blank=True, default=[], related_name='task_comment_complaints', through='course.TaskCommentUserComplaint', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='TaskOrder',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order', models.PositiveIntegerField()),
                ('task', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='course.task')),
            ],
            options={
                'ordering': ['order'],
            },
        ),
        migrations.CreateModel(
            name='TaskURLField',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('url_on_repo', models.URLField()),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='task',
            name='urls',
            field=models.ManyToManyField(blank=True, default=[], to='course.taskurlfield'),
        ),
        migrations.CreateModel(
            name='Title',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('public', models.BooleanField(default=False)),
                ('title_tasks', models.ManyToManyField(blank=True, default=[], related_name='titles', through='course.TaskOrder', to='course.task')),
            ],
        ),
        migrations.AddField(
            model_name='taskorder',
            name='title',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='course.title'),
        ),
        migrations.CreateModel(
            name='TitleOrder',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order', models.PositiveIntegerField()),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='course.course')),
                ('title', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='course.title')),
            ],
            options={
                'ordering': ['order'],
            },
        ),
        migrations.AddField(
            model_name='course',
            name='course_titles',
            field=models.ManyToManyField(blank=True, default=[], related_name='courses', through='course.TitleOrder', to='course.title'),
        ),
    ]
